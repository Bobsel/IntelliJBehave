/* The following code was generated by JFlex 1.4.3 on 5/11/12 6:46 PM */

package com.github.kumaraman21.intellijbehave.highlighter;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/11/12 6:46 PM from the specification file
 * <tt>Story.flex</tt>
 */
class _StoryLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_SCENARIO = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_STEP = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\1\4\13\0"+
    "\1\5\14\0\1\17\6\0\1\24\3\0\1\26\1\0\1\20\13\0"+
    "\1\7\1\22\2\0\1\22\11\0\1\13\1\0\1\10\1\25\1\11"+
    "\2\0\1\23\1\15\2\0\1\32\1\30\1\12\1\16\1\31\1\0"+
    "\1\14\1\33\2\0\1\21\1\0\1\27\3\0\1\6\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\1\1\1\3\2\1\1\3\2\1\2\2"+
    "\1\3\1\0\1\1\1\3\1\4\4\0\1\1\1\4"+
    "\5\1\1\0\1\1\4\0\4\1\1\5\1\0\1\1"+
    "\3\0\3\1\1\0\1\1\1\6\1\0\1\6\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\7\2\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\304"+
    "\0\340\0\374\0\u0118\0\u0134\0\u0150\0\u016c\0\u0188\0\u01a4"+
    "\0\u01c0\0\u01dc\0\u01f8\0\u0214\0\u0230\0\u024c\0\u0268\0\u0284"+
    "\0\u02a0\0\u02bc\0\u02d8\0\u02f4\0\u0310\0\u032c\0\u0348\0\u0364"+
    "\0\u0380\0\u039c\0\u03b8\0\u03d4\0\u03f0\0\u040c\0\u0428\0\u0444"+
    "\0\u0460\0\u047c\0\u0498\0\u04b4\0\u04d0\0\u04ec\0\u0508\0\u0524"+
    "\0\u0540\0\u055c\0\u0578\0\124\0\u0594\0\u05b0\0\u05cc\0\u05e8"+
    "\0\u0604\0\u0620\0\u063c\0\u0658\0\u0674\0\u0690\0\u06ac\0\u06c8"+
    "\0\u06e4\0\u0700\0\u071c\0\u0738\0\u0754\0\u0770\0\u078c\0\u07a8"+
    "\0\u07c4\0\u0770\0\u078c\0\u07e0\0\u07fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\31\4\1\10\1\11\1\7"+
    "\1\12\27\4\1\13\2\5\1\14\30\13\1\4\1\0"+
    "\32\4\1\0\2\5\1\15\3\0\1\16\24\0\1\4"+
    "\1\5\1\6\1\7\3\4\1\17\25\4\1\15\2\7"+
    "\30\4\1\0\2\10\1\20\2\0\1\21\1\16\10\0"+
    "\1\22\1\0\1\23\1\0\1\24\1\0\1\25\5\0"+
    "\1\4\1\10\1\11\1\26\2\4\1\27\1\17\10\4"+
    "\1\30\1\4\1\31\1\4\1\32\1\4\1\33\6\4"+
    "\1\0\3\4\1\34\26\4\1\13\2\0\32\13\2\15"+
    "\1\14\30\13\1\0\3\15\40\0\1\35\23\0\1\4"+
    "\1\0\6\4\1\36\23\4\1\0\3\20\2\0\1\21"+
    "\25\0\1\21\2\0\31\21\15\0\1\37\41\0\1\40"+
    "\22\0\1\41\50\0\1\42\4\0\1\4\1\20\2\26"+
    "\2\4\1\27\25\4\1\27\1\0\1\4\31\27\1\4"+
    "\1\0\13\4\1\43\17\4\1\0\21\4\1\44\11\4"+
    "\1\0\10\4\1\45\22\4\1\0\25\4\1\46\5\4"+
    "\1\0\3\4\1\47\26\4\11\0\1\50\22\0\1\4"+
    "\1\0\7\4\1\51\22\4\21\0\1\40\23\0\1\52"+
    "\47\0\1\53\21\0\1\54\20\0\1\4\1\0\17\4"+
    "\1\44\13\4\1\0\7\4\1\55\23\4\1\0\23\4"+
    "\1\56\7\4\1\0\11\4\1\57\20\4\1\47\1\0"+
    "\1\4\31\47\12\0\1\60\21\0\1\4\1\0\10\4"+
    "\1\61\21\4\12\0\1\53\22\0\3\62\60\0\1\63"+
    "\3\0\1\4\1\0\10\4\1\56\22\4\1\62\2\64"+
    "\31\4\1\0\26\4\1\65\3\4\13\0\1\66\20\0"+
    "\1\4\1\0\11\4\1\67\20\4\65\0\1\70\2\0"+
    "\1\4\1\0\27\4\1\71\2\4\14\0\1\72\17\0"+
    "\1\4\1\0\12\4\1\73\17\4\32\0\1\74\1\0"+
    "\1\4\1\0\30\4\1\75\1\4\15\0\1\76\16\0"+
    "\1\4\1\0\13\4\1\77\16\4\11\0\1\100\22\0"+
    "\1\4\1\0\7\4\1\101\22\4\16\0\1\102\15\0"+
    "\1\4\1\0\14\4\1\103\15\4\33\0\1\104\1\4"+
    "\1\0\31\4\1\105\17\0\1\106\14\0\1\4\1\0"+
    "\15\4\1\107\14\4\17\0\1\110\14\0\1\4\1\0"+
    "\15\4\1\111\14\4\1\112\2\0\31\112\1\113\1\0"+
    "\1\4\31\113\1\0\3\110\2\0\1\114\25\0\1\4"+
    "\1\110\2\111\2\4\1\115\25\4\1\114\2\110\31\114"+
    "\1\115\1\110\1\111\31\115";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2072];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\1\1\0\3\1\4\0\7\1\1\0\1\1\4\0"+
    "\5\1\1\0\1\1\3\0\3\1\1\0\1\1\1\11"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _StoryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _StoryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 98) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { yybegin(IN_SCENARIO); return StoryTokenType.TABLE_ROW;
          }
        case 9: break;
        case 2: 
          { yybegin(IN_SCENARIO); return StoryTokenType.STEP_TEXT;
          }
        case 10: break;
        case 1: 
          { return StoryTokenType.STORY_DESCRIPTION;
          }
        case 11: break;
        case 8: 
          { yybegin(IN_SCENARIO); return StoryTokenType.EXAMPLE;
          }
        case 12: break;
        case 5: 
          { return StoryTokenType.COMMENT;
          }
        case 13: break;
        case 3: 
          { return StoryTokenType.WHITE_SPACE;
          }
        case 14: break;
        case 7: 
          { yybegin(IN_SCENARIO); return StoryTokenType.SCENARIO_TEXT;
          }
        case 15: break;
        case 6: 
          { yybegin(IN_STEP); return StoryTokenType.STEP_TYPE;
          }
        case 16: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
